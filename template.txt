/////////////
Basic code
////////////
#include<bits/stdc++.h>
using namespace std;
int main()
{
int t;
cin>>t;
while(t-->0)
{
long long n;
}
return 0;
}
//////////////////////
Template for code
//////////////////////
#include<bits/stdc++.h>
#define ll long long
#define ff first
#define ss second
#define pb push_back
#define INF 1e8
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
using namespace std;
#define MAX_CHAR 256
ll M = 1000000007;
int main()
{
int t;
cin>>t;
while(t-->0)
{
ll n;
cin>>n;
ll a[n];
for(int i=0;i<n;i++)
cin>>a[i];
sort(a,a+n);
}
return 0;
}




/////////////////////////
Base for graphs:
#include<bits/stdc++.h>
#define ll long long
#define pb push_back
#define INF 1e8
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define MAX_CHAR 256
using namespace std;
int vis[100001];
const ll mxn=1e6;
//vector<int>a[mxn];
int main()
{
    int t;
    cin>>t;
    while(t-->0)
    {
    int n,k;
    cin>>n>>k;
    int p=n-1;
       vector<int>r(n,0);
    vector<int>level(n,0);
    queue<int>q;
    vector<int>a[n];
    while(p-->0)
    {
        int u,v;
        cin>>u>>v;
        --u;
        --v;
        
        /////////////////
        DIJKSTRA
        //////////////////////
        const int INF = 1000000000;
vector<vector<pair<int, int>>> adj;

void dijkstra(int s, vector<int> & d, vector<int> & p) {
    int n = adj.size();
    d.assign(n, INF);
    p.assign(n, -1);

    d[s] = 0;
    using pii = pair<int, int>;
    priority_queue<pii, vector<pii>, greater<pii>> q;
    q.push({0, s});
    while (!q.empty()) {
        int v = q.top().second;
        int d_v = q.top().first;
        q.pop();
        if (d_v != d[v])
            continue;

        for (auto edge : adj[v]) {
            int to = edge.first;
            int len = edge.second;

            if (d[v] + len < d[to]) {
                d[to] = d[v] + len;
                p[to] = v;
                q.push({d[to], to});
            }
        }
    }
}

        
        /////////////////////////////////////
            More imp function templates
            --------------------
bool uniqueChar(string str)
{
    sort(str.begin(), str.end());
    for (int i = 0; i < str.length()-1; i++) {
        if (str[i] == str[i + 1]) {
            return false;
        }
    }
    return true;
}
bool isPerfectSquare(double x)
{
    if (x >= 0) {
 
        long long s = sqrt(x);
        return (s * s == x);
    }
    return false;
}
int power(ll a,ll b) {
    if(b==0) {
        return 1;
    }
    ll res=power(a,b/2);
    if(b%2==0) {
        return res*res;
    }
    return res*res*a;
}


